# 数据库修复指南 - 更新版

## 1. 检查users表结构
首先，我们需要确认users表的实际结构：

```sql
-- 检查users表的字段结构
DESCRIBE users;
```

## 2. 根据实际结构创建测试用户
根据您的错误信息，users表中可能没有username字段。以下是几种可能的用户表结构及相应的插入语句：

### 方案1: 如果用户表使用phone_number作为用户标识
```sql
INSERT INTO users (phone_number, nickname, password, level)
VALUES 
('13800000000', '测试用户', '$2b$10$6Bnl2XByKQaEvRQo9fUYRexzvkVjsJ4HMxKrMJH5zMvRpssrIJovy', 1);
```

### 方案2: 如果用户表使用不同的字段名称
```sql
-- 如果用户名字段叫user_name而不是username
INSERT INTO users (user_name, phone_number, nickname, password, level)
VALUES 
('test', '13800000000', '测试用户', '$2b$10$6Bnl2XByKQaEvRQo9fUYRexzvkVjsJ4HMxKrMJH5zMvRpssrIJovy', 1);

-- 或者如果用户名字段叫account
INSERT INTO users (account, phone_number, nickname, password, level)
VALUES 
('test', '13800000000', '测试用户', '$2b$10$6Bnl2XByKQaEvRQo9fUYRexzvkVjsJ4HMxKrMJH5zMvRpssrIJovy', 1);

-- 或者如果用户名字段叫login_name
INSERT INTO users (login_name, phone_number, nickname, password, level)
VALUES 
('test', '13800000000', '测试用户', '$2b$10$6Bnl2XByKQaEvRQo9fUYRexzvkVjsJ4HMxKrMJH5zMvRpssrIJovy', 1);
```

## 3. 创建完整的users表
如果您需要重新创建整个users表，请使用以下SQL语句：

```sql
-- 删除现有的users表（如果存在）
DROP TABLE IF EXISTS users;

-- 创建新的users表
CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  phone_number VARCHAR(20) UNIQUE NOT NULL,
  nickname VARCHAR(50) NOT NULL,
  password VARCHAR(100) NOT NULL,
  avatar VARCHAR(255) DEFAULT 'default.png',
  level INT DEFAULT 1,
  experience INT DEFAULT 0,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- 插入测试用户
INSERT INTO users (phone_number, nickname, password, level)
VALUES 
('13800000000', '测试用户', '$2b$10$6Bnl2XByKQaEvRQo9fUYRexzvkVjsJ4HMxKrMJH5zMvRpssrIJovy', 1);
```

## 4. 更新客户端认证代码
确保客户端的Auth.js文件中的登录逻辑与数据库表结构一致。如果表结构中没有username字段，您可能需要修改客户端代码，使用手机号码作为登录标识。

### 在前端登录逻辑中使用手机号替代用户名：
```javascript
// 账号密码登录（使用手机号）
const loginWithAccount = async (phone, password) => {
  try {
    // 测试账号直接登录 - 跳过API调用
    if (phone === '13800000000' && password === '123456') {
      console.log('使用测试账号登录');
      // 使用模拟数据
      const userData = {
        id: 1,
        phone_number: '13800000000',
        nickname: '测试用户',
        level: 1
      };
      const token = 'test_token_' + Date.now();
      
      // 保存token和用户数据
      localStorage.setItem('token', token);
      localStorage.setItem('user', JSON.stringify(userData));
      
      return { success: true };
    }
    
    // 其余代码保持不变...
  }
};
```

## 5. 检查并修改后端API
可能需要更新后端API以适应新的表结构：

```javascript
// 如果使用了Node.js/Express后端，可能需要修改登录路由
app.post('/api/auth/login-account', async (req, res) => {
  try {
    // 假设现在使用手机号登录代替用户名
    const { phone_number, password } = req.body;
    
    // 查询数据库
    const user = await db.query(
      'SELECT * FROM users WHERE phone_number = ?', 
      [phone_number]
    );
    
    // 其余验证逻辑...
  } catch (error) {
    // 错误处理...
  }
});
``` 